From bfbecb5d50047e3939dda6b6495af4a04753106f Mon Sep 17 00:00:00 2001
From: Deepak <deepakbeniya@gmail.com>
Date: Wed, 20 Mar 2024 01:03:28 +0530
Subject: [PATCH] kernel_common_32.3.1 Four Patches are added into single patch
 file

Signed-off-by: Deepak <deepakbeniya@gmail.com>
---
 .gitignore                                    |  11 ++
 .../platform/tegra/camera/sensor_common.c     |  18 +++
 .../media/platform/tegra/camera/vi/channel.c  | 118 +++++++++++++++++-
 nvidia/include/media/tegra-v4l2-camera.h      |   2 +
 4 files changed, 148 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index 67d2f3503128..8ca30958ef74 100644
--- a/.gitignore
+++ b/.gitignore
@@ -49,6 +49,17 @@ Module.symvers
 modules.builtin
 modules.order
 
+###################### Patch applied from VC-MIPI Modules #######################
+.vscode*
+build/
+modules/
+*.*bz2*
+nv*.sh
+public_sources_sha.txt
+*vc_mipi*
+*vc-mipi*
+#####################  End ###################################################
+
 #
 # Top-level generic files
 #
diff --git a/nvidia/drivers/media/platform/tegra/camera/sensor_common.c b/nvidia/drivers/media/platform/tegra/camera/sensor_common.c
index d50b22e4937b..d4e6d9d9bc0f 100644
--- a/nvidia/drivers/media/platform/tegra/camera/sensor_common.c
+++ b/nvidia/drivers/media/platform/tegra/camera/sensor_common.c
@@ -292,6 +292,24 @@ static int sensor_common_parse_image_props(
 	char pix_format[24];
 	u32 value = 0;
 
+###################### Patch applied from VC-MIPI Modules #######################
+
+	err = read_property_u32(node, "active_l",
+		&image->left);
+	if (err) {
+		dev_err(dev, "%s:active_l property missing\n", __func__);
+		goto fail;
+	}
+
+	err = read_property_u32(node, "active_t",
+		&image->top);
+	if (err) {
+		dev_err(dev, "%s:active_t property missing\n", __func__);
+		goto fail;
+	}
+
+#####################  End ###################################################
+
 	err = read_property_u32(node, "active_w",
 		&image->width);
 	if (err) {
diff --git a/nvidia/drivers/media/platform/tegra/camera/vi/channel.c b/nvidia/drivers/media/platform/tegra/camera/vi/channel.c
index 03de768446ca..16267efb40ef 100644
--- a/nvidia/drivers/media/platform/tegra/camera/vi/channel.c
+++ b/nvidia/drivers/media/platform/tegra/camera/vi/channel.c
@@ -2139,6 +2139,58 @@ __tegra_channel_set_format(struct tegra_channel *chan,
 	return ret;
 }
 
+
+
+static int
+__tegra_channel_set_frame_position(struct tegra_channel *chan,
+			__u32 left, __u32 top)
+{
+	struct v4l2_subdev *sd = chan->subdev_on_csi;
+	struct camera_common_data *s_data = to_camera_common_data(sd->dev);
+	struct sensor_properties *sensor = &s_data->sensor_props;
+	int mode_idx = 0;
+
+	if (sensor->sensor_modes != NULL && sensor->num_modes > 0 && mode_idx < sensor->num_modes) {
+		struct sensor_mode_properties *mode = &sensor->sensor_modes[mode_idx];
+		struct sensor_image_properties *image = &mode->image_properties;
+		image->left = left;
+		image->top = top;
+		return 0;
+	}
+
+	return -EBUSY;
+}
+
+static int
+__tegra_channel_set_frame_size(struct tegra_channel *chan,
+			struct v4l2_pix_format *pix)
+{
+	struct v4l2_subdev *sd = chan->subdev_on_csi;
+	struct camera_common_data *s_data = to_camera_common_data(sd->dev);
+	struct sensor_properties *sensor = &s_data->sensor_props;
+	int mode_idx = 0;
+
+	pix->width = (pix->width / 4) * 4;
+
+	s_data->def_width = pix->width;
+	s_data->def_height = pix->height;
+	if (s_data->frmfmt != NULL && s_data->numfmts > 0 && mode_idx < s_data->numfmts) {
+		struct camera_common_frmfmt *frmfmt = (struct camera_common_frmfmt *)&s_data->frmfmt[mode_idx];
+		frmfmt[mode_idx].size.width = pix->width;
+		frmfmt[mode_idx].size.height = pix->height;
+	}
+	if (sensor->sensor_modes != NULL && sensor->num_modes > 0 && mode_idx < sensor->num_modes) {
+		struct sensor_mode_properties *mode = &sensor->sensor_modes[mode_idx];
+		struct sensor_image_properties *image = &mode->image_properties;
+		image->width = pix->width;
+		image->height = pix->height;
+		return 0;
+	}
+
+	return -EBUSY;
+}
+
+
 static int
 tegra_channel_set_format(struct file *file, void *fh,
 			struct v4l2_format *format)
@@ -2146,7 +2198,10 @@ tegra_channel_set_format(struct file *file, void *fh,
 	struct tegra_channel *chan = video_drvdata(file);
 	int ret = 0;
 
-	/* get the suppod format by try_fmt */
+	__tegra_channel_set_frame_size(chan, &format->fmt.pix);
+
+	/* get the supported format by try_fmt */
+
 	ret = __tegra_channel_try_format(chan, &format->fmt.pix);
 	if (ret)
 		return ret;
@@ -2157,6 +2212,65 @@ tegra_channel_set_format(struct file *file, void *fh,
 	return __tegra_channel_set_format(chan, &format->fmt.pix);
 }
 
+
+static int
+tegra_channel_get_selection(struct file *file, void *fh,
+			struct v4l2_selection *selection)
+{
+	struct tegra_channel *chan = video_drvdata(file);
+	struct v4l2_subdev *sd = chan->subdev_on_csi;
+	struct camera_common_data *s_data = to_camera_common_data(sd->dev);
+	struct sensor_properties *sensor = &s_data->sensor_props;
+	int mode_idx = 0;
+
+	switch (selection->target) {
+	case V4L2_SEL_TGT_CROP:
+		if (sensor->sensor_modes != NULL && sensor->num_modes > 0 && mode_idx < sensor->num_modes) {
+			struct sensor_mode_properties *mode = &sensor->sensor_modes[mode_idx];
+			struct sensor_image_properties *image = &mode->image_properties;
+			selection->r.left = image->left;
+			selection->r.top = image->top;
+			selection->r.width = image->width;
+			selection->r.height = image->height;
+
+			dev_dbg(chan->vi->dev, "%s: type: 0x%x, target: 0x%x, flags: 0x%x, left: %u, top: %u, width: %u, height: %u\n", __func__,
+			selection->type, selection->target, selection->flags,
+			selection->r.left, selection->r.top, selection->r.width, selection->r.height);
+			return 0;
+		}
+		break;
+	}
+
+	return -EINVAL;
+}
+
+static int
+tegra_channel_set_selection(struct file *file, void *fh,
+			struct v4l2_selection *selection)
+{
+	struct tegra_channel *chan = video_drvdata(file);
+	struct v4l2_format format;
+
+	dev_dbg(chan->vi->dev, "%s: type: 0x%x, target: 0x%x, flags: 0x%x, left: %u, top: %u, width: %u, height: %u\n", __func__,
+		selection->type, selection->target, selection->flags,
+		selection->r.left, selection->r.top, selection->r.width, selection->r.height);
+
+	switch (selection->target) {
+	case V4L2_SEL_TGT_CROP:
+		__tegra_channel_set_frame_position(chan, selection->r.left, selection->r.top);
+
+		tegra_channel_get_format(file, fh, &format);
+		format.fmt.pix.width = selection->r.width;
+		format.fmt.pix.height = selection->r.height;
+		// bytesperline has to be zero to be recalculated
+		// in tegra_channel_fmt_align()
+		format.fmt.pix.bytesperline = 0;
+		return tegra_channel_set_format(file, fh, &format);
+	}
+
+	return -EINVAL;
+}
+
 static int tegra_channel_subscribe_event(struct v4l2_fh *fh,
 				  const struct v4l2_event_subscription *sub)
 {
@@ -2270,6 +2384,8 @@ static const struct v4l2_ioctl_ops tegra_channel_ioctl_ops = {
 	.vidioc_g_fmt_vid_cap		= tegra_channel_get_format,
 	.vidioc_s_fmt_vid_cap		= tegra_channel_set_format,
 	.vidioc_try_fmt_vid_cap		= tegra_channel_try_format,
+	.vidioc_g_selection		= tegra_channel_get_selection,
+	.vidioc_s_selection		= tegra_channel_set_selection,
 	.vidioc_reqbufs			= vb2_ioctl_reqbufs,
 	.vidioc_prepare_buf		= vb2_ioctl_prepare_buf,
 	.vidioc_querybuf		= vb2_ioctl_querybuf,
diff --git a/nvidia/include/media/tegra-v4l2-camera.h b/nvidia/include/media/tegra-v4l2-camera.h
index 99b5e5b97b44..49aed5bb2587 100644
--- a/nvidia/include/media/tegra-v4l2-camera.h
+++ b/nvidia/include/media/tegra-v4l2-camera.h
@@ -120,6 +120,8 @@ struct sensor_signal_properties {
 };
 
 struct sensor_image_properties {
+	__u32 left;
+	__u32 top;
 	__u32 width;
 	__u32 height;
 	__u32 line_length;
-- 
2.25.1

